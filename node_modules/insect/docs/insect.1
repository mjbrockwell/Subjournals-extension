'\" t
.\" Automatically generated by Pandoc 3.6.1
.\"
.TH "" "1" "" "" "insect - scientific calculator"
.SH NAME
insect \- \f[B]in\f[R]teractive \f[B]sc\f[R]i\f[B]e\f[R]ntific
\f[B]c\f[R]alcula\f[B]t\f[R]or
.SH SYNOPSIS
\f[CR]insect [EXPR]\f[R]
.SH DESCRIPTION
\f[I]insect\f[R] is a high\-precision scientific calculator with full
support for physical units.
.PP
It can be used in interactive mode by simply calling \f[I]insect\f[R].
This mode can also be used to read from a file, by simply piping the
file contents via \f[I]insect < my\-calculation.ins\f[R].
If you want to evaluate just a single expression, pass it as an
argument: \f[I]insect \[aq]70mph to km/h\[aq]\f[R].
.SS Documentation
.IP \[bu] 2
\f[B]Evaluate mathematical expressions\f[R]:
.RS 2
.IP
.EX
1920/16*9
2\[ha]32
sqrt(1.4\[ha]2 + 1.5\[ha]2) * cos(pi/3)\[ha]2
.EE
.IP \[bu] 2
\f[B]Operators\f[R]: addition (\f[CR]+\f[R]), subtraction
(\f[CR]\-\f[R]), multiplication (\f[CR]*\f[R], \f[CR]·\f[R],
\f[CR]×\f[R]), division (\f[CR]/\f[R], \f[CR]÷\f[R], \f[CR]per\f[R]),
exponentiation (\f[CR]\[ha]\f[R], \f[CR]**\f[R]).
Full list: see \f[I]Reference\f[R] below.
.IP \[bu] 2
\f[B]Mathematical functions\f[R]: \f[CR]abs\f[R], \f[CR]acos\f[R],
\f[CR]acosh\f[R], \f[CR]acot\f[R]/\f[CR]arccotangent\f[R],
\f[CR]acoth\f[R]/\f[CR]archypcotangent\f[R],
\f[CR]acsc\f[R]/\f[CR]arccosecant\f[R],
\f[CR]acsch\f[R]/\f[CR]archypcosecant\f[R], \f[CR]arcsecant\f[R],
\f[CR]asech\f[R]/\f[CR]archypsecant\f[R], \f[CR]asin\f[R],
\f[CR]asinh\f[R], \f[CR]atan2\f[R], \f[CR]atan\f[R], \f[CR]atanh\f[R],
\f[CR]ceil\f[R], \f[CR]cos\f[R], \f[CR]cosh\f[R],
\f[CR]cot\f[R]/\f[CR]cotangent\f[R],
\f[CR]coth\f[R]/\f[CR]hypcotangent\f[R],
\f[CR]csc\f[R]/\f[CR]cosecant\f[R],
\f[CR]csch\f[R]/\f[CR]hypcosecant\f[R], \f[CR]exp\f[R],
\f[CR]floor\f[R], \f[CR]fromCelsius\f[R], \f[CR]fromFahrenheit\f[R],
\f[CR]gamma\f[R], \f[CR]ln\f[R], \f[CR]log10\f[R], \f[CR]log\f[R],
\f[CR]maximum\f[R], \f[CR]mean\f[R], \f[CR]minimum\f[R],
\f[CR]round\f[R], \f[CR]secant\f[R],
\f[CR]sech\f[R]/\f[CR]hypsecant\f[R], \f[CR]sin\f[R], \f[CR]sinh\f[R],
\f[CR]sqrt\f[R], \f[CR]tan\f[R], \f[CR]tanh\f[R], \f[CR]toCelsius\f[R],
\f[CR]toFahrenheit\f[R].
.IP \[bu] 2
\f[B]High\-precision numeric type\f[R] with \f[I]30\f[R] significant
digits that can handle \f[I]very\f[R] large (or small) exponents like
\f[I]10\[ha](10\[ha]10)\f[R].
.IP \[bu] 2
\f[B]Exponential notation\f[R]: \f[CR]6.022e23\f[R].
.IP \[bu] 2
\f[B]Hexadecimal, octal and binary number input\f[R]:
.RS 2
.IP
.EX
0xFFFF
0b1011
0o32
0x2.F
0o5p3
.EE
.RE
.RE
.IP \[bu] 2
\f[B]Physical units\f[R]: parsing and handling, including metric
prefixes:
.RS 2
.IP
.EX
2 min + 30 s
40 kg * 9.8 m/s\[ha]2 * 150 cm
sin(30°)
.EE
.IP \[bu] 2
\f[B]Supported units\f[R]: see \f[I]Reference\f[R] section below.
.IP \[bu] 2
\f[B]Implicit conversions\f[R]: \f[CR]15 km/h * 30 min\f[R] evaluates to
\f[CR]7.5 km\f[R].
.IP \[bu] 2
\f[B]Useful error messages\f[R]:
.RS 2
.IP
.EX
> 2 watts + 4 newton meter

Conversion error:
  Cannot convert unit N·m (base units: kg·m²·s⁻²)
              to unit W (base units: kg·m²·s⁻³)
.EE
.RE
.RE
.IP \[bu] 2
\f[B]Explicit unit conversions\f[R]: the \f[CR]\->\f[R] conversion
operator (aliases: \f[CR]→\f[R], \f[CR]➞\f[R], \f[CR]to\f[R]):
.RS 2
.IP
.EX
60 mph \-> m/s
500 km/day \-> km/h
1 mrad \-> degree
52 weeks \-> days
5 in + 2 ft \-> cm
atan(30 cm / 2 m) \-> degree
6 Mbit/s * 1.5 h \-> GB
.EE
.RE
.IP \[bu] 2
\f[B]Variable assignments\f[R]:
.RS 2
.PP
Example: mass of the earth
.IP
.EX
r = 6000km
vol = 4/3 * pi * r\[ha]3
density = 5 g/cm\[ha]3
vol * density \-> kg
.EE
.PP
Example: oscillation period of a pendulum
.IP
.EX
len = 20 cm
2pi*sqrt(len/g0) \-> ms
.EE
.IP \[bu] 2
\f[B]Predefined constants\f[R] (type \f[CR]list\f[R] to see them all):
speed of light (\f[CR]c\f[R]), Planck\[aq]s constant (\f[CR]h_bar\f[R]),
electron mass (\f[CR]electronMass\f[R]), elementary charge
(\f[CR]elementaryCharge\f[R]), magnetic constant (\f[CR]µ0\f[R]),
electric constant (\f[CR]eps0\f[R]), Bohr magneton (\f[CR]µ_B\f[R]),
Avogadro\[aq]s constant (\f[CR]N_A\f[R]), Boltzmann constant
(\f[CR]k_B\f[R]), gravitational acceleration (\f[CR]g0\f[R]), ideal gas
constant (\f[CR]R\f[R]), ...
.IP \[bu] 2
\f[B]Last result\f[R]: you can use \f[CR]ans\f[R] (answer) or
\f[CR]_\f[R] to refer to the result of the last calculation.
.RE
.IP \[bu] 2
\f[B]User\-defined functions\f[R]:
.RS 2
.PP
Example: kinetic energy
.IP
.EX
kineticEnergy(mass, speed) = 0.5 * mass * speed\[ha]2 \-> kJ

kineticEnergy(800 kg, 120 km/h)
.EE
.PP
Example: barometric formula
.IP
.EX
P0 = 1 atm
T0 = fromCelsius(15)
tempGradient = 0.65 K / 100 m

pressure(height) = P0 * (1 \- tempGradient * height / T0)\[ha]5.255 \-> hPa

pressure(1500 m)
.EE
.RE
.IP \[bu] 2
\f[B]Sums and products\f[R]:
.RS 2
.PP
Syntax:
.IP
.EX
sum(<expression>, <index\-variable>, <from>, <to>)
product(<expression>, <index\-variable>, <from>, <to>)
.EE
.PP
Examples:
.IP
.EX
# sum of the first ten squares
sum(k\[ha]2, k, 1, 10)

# the factorial of n as the product 1 × 2 × ... × n
myFactorial(n) = product(k, k, 1, n)
.EE
.RE
.IP \[bu] 2
\f[B]Unicode support\f[R]:
.RS 2
.IP
.EX
λ = 2 × 300 µm
ν = c/λ → GHz
.EE
.RE
.IP \[bu] 2
\f[B]And more\f[R]: tab completion, command history (arrow keys,
\f[CR]Ctrl\f[R]+\f[CR]R\f[R]), pretty printing, syntax highlighting, ...
.SS Reference
.IP \[bu] 2
Operators (ordered by precedence: high to low)
.RS 2
.PP
.TS
tab(@);
l l.
T{
Operator
T}@T{
Syntax
T}
_
T{
factorial
T}@T{
\f[CR]!\f[R]
T}
T{
square, cube, ...
T}@T{
\f[CR]²\f[R], \f[CR]³\f[R], \f[CR]⁻¹\f[R], ...
T}
T{
exponentiation
T}@T{
\f[CR]\[ha]\f[R], \f[CR]**\f[R]
T}
T{
multiplication (implicit)
T}@T{
\f[I]whitespace\f[R]
T}
T{
modulo
T}@T{
\f[CR]%\f[R]
T}
T{
division
T}@T{
\f[CR]per\f[R]
T}
T{
division
T}@T{
\f[CR]/\f[R], \f[CR]÷\f[R]
T}
T{
multiplication (explicit)
T}@T{
\f[CR]*\f[R], \f[CR]·\f[R], \f[CR]×\f[R]
T}
T{
subtraction
T}@T{
\f[CR]\-\f[R]
T}
T{
addition
T}@T{
\f[CR]+\f[R]
T}
T{
unit conversion
T}@T{
\f[CR]\->\f[R], \f[CR]→\f[R], \f[CR]➞\f[R], \f[CR]to\f[R]
T}
T{
assignment
T}@T{
\f[CR]=\f[R]
T}
.TE
.PP
Note that \f[I]implicit\f[R] multiplication has a higher precedence than
division, i.e.
\f[CR]50 cm / 2 m\f[R] will be parsed as \f[CR]50 cm / (2 m)\f[R].
.RE
.IP \[bu] 2
Commands
.RS 2
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Syntax
T}
_
T{
help text
T}@T{
\f[CR]help\f[R], \f[CR]?\f[R]
T}
T{
list of variables
T}@T{
\f[CR]list\f[R], \f[CR]ls\f[R], \f[CR]ll\f[R]
T}
T{
reset environment
T}@T{
\f[CR]reset\f[R]
T}
T{
clear screen
T}@T{
\f[CR]clear\f[R], \f[CR]cls\f[R]
T}
T{
copy result to clipboard
T}@T{
\f[CR]copy\f[R], \f[CR]cp\f[R]
T}
T{
quit (CLI)
T}@T{
\f[CR]quit\f[R], \f[CR]exit\f[R]
T}
.TE
.RE
.SS FAQ
.IP \[bu] 2
Why are Celsius and Fahrenheit not supported?
.RS 2
.PP
In contrast to the SI unit of temperature, the \c
.UR https://en.wikipedia.org/wiki/Kelvin
Kelvin
.UE \c
, and to all other units, Celsius and Fahrenheit both require an
additive offset when converting into and from other temperature units.
This additive offset leads to all kinds of ambiguities when performing
calculations in these units.
Adding two temperatures in Celsius, for example, is only meaningful if
one of them is seen as an offset value (rather than as an absolute
temperature).
Insect is primarily a scientific calculator (as opposed to a unit
conversion tool) and therefore focuses on getting physical calculations
right.
.PP
Even though \f[I]°C\f[R] and \f[I]°F\f[R] are not supported as built\-in
units, there are helper functions to convert to and from Celsius (and
Fahrenheit):
.IP \[bu] 2
\f[CR]fromCelsius\f[R] takes a \f[B]scalar value\f[R] that represents a
temperature in Celsius and returns a corresponding \f[B]temperature in
Kelvin\f[R]:
.RS 2
.IP
.EX
> fromCelsius(0)

   = 273.15 K

> k_B * fromCelsius(23) to meV

   = 25.5202 meV
.EE
.RE
.IP \[bu] 2
\f[CR]toCelsius\f[R] takes a \f[B]temperature in Kelvin\f[R] and returns
a \f[B]scalar value\f[R] that represents the corresponding temperature
in Celsius:
.RS 2
.IP
.EX
> toCelsius(70 K)

   = \-203.15

> toCelsius(25 meV / k_B)

   = 16.963
.EE
.RE
.RE
.IP \[bu] 2
Why is \f[CR]1/2 x\f[R] parsed as \f[CR]1/(2x)\f[R]?
.RS 2
.PP
\f[I]Implicit\f[R] multiplication (without an explicit multiplication
sign) has a higher precedence than division (see operator precedence
rules).
This is by design, in order to parse inputs like \f[CR]50 cm / 2 m\f[R]
as \f[CR](50 cm) / (2 m)\f[R].
If you meant \f[I]½ · x\f[R], write \f[CR]1/2 * x\f[R].
.RE
.IP \[bu] 2
What is the internal numerical precision?
.RS 2
.PP
By default, Insect shows 6 significant digits in the result of the
calculation.
However, the internal numerical precision is much higher (30 digits).
.RE
.IP \[bu] 2
How does the conversion operator work?
.RS 2
.PP
The conversion operator \f[CR]\->\f[R] attempts to convert the physical
quantity on its left hand side to the \f[I]unit of the expression\f[R]
on its right hand side.
This means that you can write an arbitrary expression on the right hand
side (but only the unit part will be extracted).
For example:
.IP
.EX
# simple unit conversion:
> 120 km/h \-> mph

  = 74.5645 mi/h

# expression on the right hand side:
> 120 m\[ha]3 \-> km * m\[ha]2

  = 0.12 m²·km

# convert x1 to the same unit as x2:
> x1 = 50 km / h
> x2 = 3 m/s \-> x1

  x2 = 10.8 km/h
.EE
.RE
.IP \[bu] 2
What is the relation between the units \f[CR]RPM\f[R], \f[CR]rad/s\f[R],
\f[CR]deg/s\f[R] and \f[CR]Hz\f[R]?
.RS 2
.PP
The unit \c
.UR https://en.wikipedia.org/wiki/Revolutions_per_minute
\f[CR]RPM\f[R]
.UE \c
\ (revolutions per minute) is defined via \f[CR]1 RPM = 1 / minute\f[R]
where the \f[CR]1\f[R] on the right hand side symbolizes \[dq]1
revolution\[dq].
.PP
As the base unit is the same (\f[CR]1 / second\f[R]), \f[CR]RPM\f[R] can
be converted to \f[CR]rad / s\f[R], \f[CR]deg / s\f[R] or \f[CR]Hz\f[R].
Note, however, that \f[CR]1 RPM\f[R] does \f[I]not\f[R] equal
\f[CR]2π rad / min\f[R] or \f[CR]360° / min\f[R] or \f[CR]1 Hz\f[R], as
some might expect.
If you\[aq]re interested in computing the traversed angle of something
that rotates with a given number of revolutions per minute, you need to
multiply by \f[CR]2π rad\f[R] or \f[CR]360°\f[R] because:
.IP
.EX
1 RPM · (360°/revolution) = (1 revolution / minute) · (360° / revolution) = 360° / minute
.EE
.RE
.SH AUTHOR
Written by David Peter \c
.MT mail@david-peter.de
.ME \c
\&.
.SH REPORTING BUGS
Please report bugs on GitHub: \c
.UR https://github.com/sharkdp/insect
.UE \c
\&.
.SH COPYRIGHT
insect is MIT\-licensed.
For details, see \c
.UR https://github.com/sharkdp/insect
.UE \c
\&.
.SH SEE ALSO
.IP \[bu] 2
Full documentation at \c
.UR https://github.com/sharkdp/insect
.UE \c
\&.
