{"version":3,"file":"MenuItemSelect.js","sourceRoot":"","sources":["../../src/components/MenuItemSelect.tsx"],"names":[],"mappings":";;;AAAA,4CAAkE;AAClE,gDAA0E;AAC1E,0DAA0E;AAkB1E,MAAM,cAAc,GAAG,CACrB,KAA6B,EAChB,EAAE;IACf,MAAM,UAAU,GAAG,eAAM,CAAC,MAAM,EAAK,CAAC;IACtC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAE,IAAO,EAAE,EAAE;QAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACpE,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC;IACF,MAAM,EACJ,UAAU,EACV,UAAU,GAAG,KAAK,EAClB,QAAQ,EACR,aAAa,EACb,cAAc,KAEZ,KAAK,EADJ,WAAW,kBACZ,KAAK,EAPH,2EAOL,CAAQ,CAAC;IAEV,MAAM,aAAa,GAAG,CACpB,8BAAC,aAAM,kBACL,IAAI,EACF,UAAU,CAAC,CAAC,CAAC,CACX,aAAa,CAAC,CAAC,CAAC,CACd,aAAa,CAAC,UAAe,CAAC,CAC/B,CAAC,CAAC,CAAC,CACF,UAAU,CACX,CACF,CAAC,CAAC,CAAC,CACF,wCAAM,SAAS,EAAC,mBAAmB,IAChC,cAAc,IAAI,WAAW,CACzB,CACR,EAEH,SAAS,EAAC,uBAAuB,IAC7B,KAAK,CAAC,WAAW,EACrB,CACH,CAAC;IAEF,OAAO,CACL,8BAAC,UAAU,oBACL,WAAW,IACf,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAClD,8BAAC,eAAQ,IACP,GAAG,EAAE,IAAI,EACT,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAChD,MAAM,EAAE,SAAS,CAAC,MAAM,EACxB,OAAO,EAAE,WAAW,GACpB,CACH,EACD,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EACrD,YAAY,kBACV,OAAO,EAAE,IAAI,EACb,cAAc,EAAE,IAAI,IACjB,KAAK,CAAC,YAAY,MAGtB,QAAQ;QACP,CAAC,CAAC,QAAQ,CAAC;YACP,UAAU;YACV,cAAc;YACd,aAAa;SACd,CAAC;QACJ,CAAC,CAAC,aAAa,CACN,CACd,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,cAAc,CAAC","sourcesContent":["import { Button, ButtonProps, MenuItem } from \"@blueprintjs/core\";\nimport { SelectProps, Select, ICreateNewItem } from \"@blueprintjs/select\";\nimport React, { ReactText, ButtonHTMLAttributes, ReactNode } from \"react\";\n\ntype ActiveItem<T> = T | ICreateNewItem | null | undefined;\ntype TransformItem<T> = (s: T) => ReactNode;\ntype MenuItemSelectProps<T extends ReactText> = Omit<\n  SelectProps<T>,\n  \"itemRenderer\"\n> & {\n  ButtonProps?: ButtonProps & ButtonHTMLAttributes<HTMLButtonElement>;\n  emptyValueText?: string;\n  transformItem?: TransformItem<T>;\n  children?: (props: {\n    activeItem: ActiveItem<T>;\n    emptyValueText?: string;\n    transformItem?: TransformItem<T>;\n  }) => ReactNode;\n};\n\nconst MenuItemSelect = <T extends ReactText>(\n  props: MenuItemSelectProps<T>\n): JSX.Element => {\n  const TypeSelect = Select.ofType<T>();\n  const itemPredicate = (query: string, item: T) => {\n    const text = props.transformItem ? props.transformItem(item) : item;\n    return String(text).toLowerCase().includes(query.toLowerCase());\n  };\n  const {\n    activeItem,\n    filterable = false,\n    children,\n    transformItem,\n    emptyValueText,\n    ...selectProps\n  } = props;\n\n  const defaultButton = (\n    <Button\n      text={\n        activeItem ? (\n          transformItem ? (\n            transformItem(activeItem as T)\n          ) : (\n            activeItem\n          )\n        ) : (\n          <span className=\"opacity-50 italic\">\n            {emptyValueText || \"Choose...\"}\n          </span>\n        )\n      }\n      rightIcon=\"double-caret-vertical\"\n      {...props.ButtonProps}\n    />\n  );\n\n  return (\n    <TypeSelect\n      {...selectProps}\n      itemRenderer={(item, { modifiers, handleClick }) => (\n        <MenuItem\n          key={item}\n          text={transformItem ? transformItem(item) : item}\n          active={modifiers.active}\n          onClick={handleClick}\n        />\n      )}\n      filterable={filterable}\n      itemPredicate={filterable ? itemPredicate : undefined}\n      popoverProps={{\n        minimal: true,\n        captureDismiss: true,\n        ...props.popoverProps,\n      }}\n    >\n      {children\n        ? children({\n            activeItem,\n            emptyValueText,\n            transformItem,\n          })\n        : defaultButton}\n    </TypeSelect>\n  );\n};\n\nexport default MenuItemSelect;\n"]}