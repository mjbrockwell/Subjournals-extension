"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const select_1 = require("@blueprintjs/select");
const react_1 = tslib_1.__importDefault(require("react"));
const MenuItemSelect = (props) => {
    const TypeSelect = select_1.Select.ofType();
    const itemPredicate = (query, item) => {
        const text = props.transformItem ? props.transformItem(item) : item;
        return String(text).toLowerCase().includes(query.toLowerCase());
    };
    const { activeItem, filterable = false, children, transformItem, emptyValueText } = props, selectProps = tslib_1.__rest(props, ["activeItem", "filterable", "children", "transformItem", "emptyValueText"]);
    const defaultButton = (react_1.default.createElement(core_1.Button, Object.assign({ text: activeItem ? (transformItem ? (transformItem(activeItem)) : (activeItem)) : (react_1.default.createElement("span", { className: "opacity-50 italic" }, emptyValueText || "Choose...")), rightIcon: "double-caret-vertical" }, props.ButtonProps)));
    return (react_1.default.createElement(TypeSelect, Object.assign({}, selectProps, { itemRenderer: (item, { modifiers, handleClick }) => (react_1.default.createElement(core_1.MenuItem, { key: item, text: transformItem ? transformItem(item) : item, active: modifiers.active, onClick: handleClick })), filterable: filterable, itemPredicate: filterable ? itemPredicate : undefined, popoverProps: Object.assign({ minimal: true, captureDismiss: true }, props.popoverProps) }), children
        ? children({
            activeItem,
            emptyValueText,
            transformItem,
        })
        : defaultButton));
};
exports.default = MenuItemSelect;
//# sourceMappingURL=MenuItemSelect.js.map